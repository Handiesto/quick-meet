@startuml

== Создание встречи ==

actor creator as "Создатель"

participant tg as "Telegram"

box "QuickMeet" #LightBlue
    participant service as "Обработчик сообщений"
    database db as "БД"
end box

creator -> tg: "Запланировать встречу"
tg -> service: "Пришла команда на создание встречи"
service --> tg: "Заполните данные"
note left
- название встречи
- временные слоты
- участники
- время окончательного принятия решения
- тип голосования: кворумное (51%), единогласное (100%) , ручное
end note
tg --> creator: "Заполните данные"

creator -> tg: "Данные по встрече"
tg -> service: "Данные по встрече"
service -> db: "Создать запланированную встречу"
note left
- name - название встречи
- time slots - временные слоты
- participants - участники
- due_date - дата окончательного принятия решения
- vote_type - тип голосования
- status - статус встречи (VOTING, CANCELED, VOTED)
end note
db --> service: "Запланированная встреча сохранена"

loop участники встречи
service -> tg: "Вам назначена встреча"
alt "Сообщение успешно доставлено"
tg --> service: "Сообщение успешно доставлено"
 else "Ошибка доставки сообщения":
tg --> service: "Ошибка доставки сообщения"
service --> service: "Сохраняем факт ошибки"
end

alt "Все участники получили уведомление"
service --> tg: "Запланированная встреча создана"
else "Кто-то не получил уведомление"
service --> tg: "Запланированная встреча создана, кроме участников: <список>"
end

tg -> creator: "Встреча запланирована"


== Обзор состояния встречи ==

creator -> tg: "Получить данные по встрече"
tg -> service: "Предоставьте данные по встрече"
service -> db: "Поиск встречи"
alt "Встреча найдена"
db --> service: "Данные о найденной встрече"
else "Встреча не найдена"
db --> service: "Встреча не существует"
end

service --> tg: "Данные о встрече"
note left
- Название встречи
- Временные слоты и количество голосов за каждый
- Участники и статус их голосования
- Дата окончательного принятия решения
end note

tg --> creator: "Данные о встрече"

== Окончание голосования ==

... последний участник отдал свой голос, либо вышло время ...

service -> db: "Данные о встрече и голоса"
db --> service: "Данные"

service -> service: "Анализ голосов"

alt "Тип голосования ручное"

service -> tg: "Голосование окончено и необходимо принять решение"
tg -> creator: "Сделайте выбор"

else "Тип голосования автоматическое и существует временной слот"

service -> tg: "Голосование окончено, вот результат"
tg -> creator: "Результат голосования"

loop участники встречи
service -> tg: "Результат голосования"
end

else "Тип голосования автоматическое и временной слот не выбран"
service -> tg: "Голосование окончено и необходимо принять решение"
tg -> creator: "Сделайте выбор"
end

alt "Создатель сделал выбор"
    creator -> tg: "Выбор временного слота"
    tg -> service: "Создатель выбрал временной слот"
    service -> db: "Голосование окончено"

    loop участники встречи
    service -> tg: "Результат голосования"
    end

    service --> tg: "Результат сохранён"
    tg --> creator: "Результат голосования сохранён"

else "Голосование отменено"
    creator -> tg: "Отменить голосование"
    tg -> service: "Отменить голосование"
    service -> db: "Голосование отменено"
    service --> tg: "Голосование отменено"
    tg --> creator: "Голосование отменено"
end

@enduml